@inject HttpClient Http
@using Velvetech.Presentation.Shared.Dtos

@namespace Velvetech.Presentation.Client.Pages.Student

@if (Student != null)
{
	<div class="modal @_modalClass" tabindex="-1" role="dialog" style="display:@_modalDisplay">
		<div class="modal-dialog" role="document">
			<div class="modal-content">
				<h1>@_errorMessage</h1>
				<br />

				<EditForm Model="Student" OnValidSubmit="@SaveClick">
					<DataAnnotationsValidator />
					<div class="modal-header">
						<h5 class="modal-title" id="exampleModalLabel">Edit @Student.FullName</h5>
						<button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="Close">
							<span aria-hidden="true">&times;</span>
						</button>
					</div>
					<div class="modal-body">

						@if (Student == null)
						{

						}
						else
						{
							<div class="container">
								<div class="row">
									<div class="col-md-12">
										<div class="form-group">
											<label class="control-label col-md-6">Firstname</label>
											<div class="col-md-12">
												<InputText class="form-control" @bind-Value="Student.Firstname" />
												<ValidationMessage For="(() => Student.Firstname)" />
											</div>
										</div>

										<div class="form-group">
											<label class="control-label col-md-6">Middlename</label>
											<div class="col-md-12">
												<InputText class="form-control" @bind-Value="Student.Middlename" />
												<ValidationMessage For="(() => Student.Middlename)" />
											</div>
										</div>

										<div class="form-group">
											<label class="control-label col-md-6">Lastname</label>
											<div class="col-md-12">
												<InputText class="form-control" @bind-Value="Student.Lastname" />
												<ValidationMessage For="(() => Student.Lastname)" />
											</div>
										</div>

										<div class="form-group">
											<label class="control-label col-md-6">Callsign</label>
											<div class="col-md-12">
												<InputText class="form-control" @bind-Value="Student.Callsign" />
												<ValidationMessage For="(() => Student.Callsign)" />
											</div>
										</div>
									</div>

									<div class="col-md-12">
										<div class="form-group">
											<label class="control-label col-md-6">Sex</label>
											<div class="col-md-12">
												<InputSelect @bind-Value="SexId" class="form-control">
													@foreach (var sex in SexList)
															{
														<option value="@sex.Id.ToString()">@sex.Name</option>
															}
												</InputSelect>
												<ValidationMessage For="(() => SexId)" />
											</div>
										</div>
									</div>
								</div>
							</div>
						}
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Close">Cancel</button>
						<button type="submit" class="btn btn-primary">
							Save
						</button>
					</div>
				</EditForm>
			</div>
		</div>
	</div>
}

@code {
	[Parameter]
	public SexDto[] SexList { get; set; }

	[Parameter]
	public EventCallback OnSave { get; set; }

	string SexId
	{
		get => Student.SexId.ToString();
		set => Student.SexId = int.Parse(value);
	}

	public StudentDto Student { get; set; }
	string _modalDisplay = "block;";
	string _modalClass = "Show";
	string _errorMessage;

	private async Task SaveClick()
	{
		if (Student is null)
		{
			_errorMessage = "Student is null";
			return;
		}

		var result = await Http.PutAsJsonAsync($"api/Students/Update", Student);
		if (result.StatusCode == System.Net.HttpStatusCode.OK)
		{
			Close();
			await OnSave.InvokeAsync(null);
		}
		else
			_errorMessage = result.StatusCode.ToString();
	}

	public void Open()
	{
		_modalDisplay = "block;";
		_modalClass = "Show";
		StateHasChanged();
	}

	private void Close()
	{
		_modalDisplay = "none";
		_modalClass = "";
		StateHasChanged();
	}
}
