@page "/pages/students"

@inject HttpClient Http
@inject NavigationManager NavigationManager
@using Velvetech.Presentation.Shared
@using Velvetech.Presentation.Shared.Dtos

@namespace Velvetech.Presentation.Client.Pages.Student

<h1>Students</h1>
<h1>@title</h1>

<button class="btn btn-primary" @onclick="Add">Add student</button>

@if (page == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Full name</th>
				<th>Callsign</th>
				<th>Sex</th>
				<th>Groups</th>
				<th></th>
			</tr>
		</thead>
		<tbody>
			@{
				counter = 0;
			}
			@foreach (var student in page.Items)
			{
				var i = counter++;

			<tr class="">
				<td>@student.Firstname</td>
				<td>@student.Callsign</td>
				<td>@student.Sex.Name</td>
				<td>@(string.Join(", ", student.Groups))</td>
				<td>
					<button class="btn btn-primary" @onclick="() => Edit(i)">Edit</button>
					<button class="btn btn-primary" @onclick="async () => await RemoveAsync(i)">Remove</button>
				</td>
			</tr>
			}
		</tbody>
	</table>

	<button class="btn btn-primary" disabled="@(page.PageIndex == 0)" @onclick="PreviousPage">Previous page</button>
	<button class="btn btn-primary" disabled="@(page.IsLastPage)" @onclick="NextPage">Next page</button>
}

<Velvetech.Presentation.Client.Pages.Student.Add SexList="@SexList" @ref="AddComponent" OnSave="Update"/>
<Velvetech.Presentation.Client.Pages.Student.Edit SexList="@SexList" @ref="EditComponent" OnSave="Update"/>

@code
{
	int counter, studentCounter;
	Page<StudentDto> page;
	string title = string.Empty;

	SexDto[] SexList;

	private Add AddComponent { get; set; }
	private Edit EditComponent { get; set; }

	void Add()
	{
		if (AddComponent is null)
			return;
		AddComponent.Student = new StudentDto() { SexId = 1 };
		AddComponent.Open();
	}

	void Edit(int index)
	{
		if (EditComponent is null)
			return;
		EditComponent.Student = page.Items[index];
		EditComponent.Open();
	}

	async Task RemoveAsync(int index)
	{
		var guid = page.Items[index].Id;
		await Http.DeleteAsync($"api/Students/Delete/{guid}");
		await Update();
	}

	async Task Update()
	{
		await LoadPage(page.PageSize, page.PageIndex);;
	}

	async Task NextPage()
	{
		if (page != null &&
			!page.IsLastPage)
			await LoadPage(10, page.PageIndex + 1);
	}

	async Task PreviousPage()
	{
		if (page != null &&
			page.PageIndex > 0)
			await LoadPage(10, page.PageIndex - 1);
	}

	async Task LoadFirstPage()
	{
		page = await Http.GetFromJsonAsync<Page<StudentDto>>($"api/Students/List");
	}

	async Task LoadPage(int size, int index)
	{
		page = await Http.GetFromJsonAsync<Page<StudentDto>>($"api/Students/List?pagesize={size}&pageindex={index}");
	}

	protected override async Task OnInitializedAsync()
	{
		SexList = await Http.GetFromJsonAsync<SexDto[]>($"api/Students/sexlist");
		await LoadFirstPage();
	}
}
