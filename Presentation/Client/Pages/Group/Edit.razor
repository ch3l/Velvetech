@inject HttpClient Http
@using Velvetech.Presentation.Shared.Dtos
@using System.Threading
@using Velvetech.Presentation.Shared.Requests

@namespace Velvetech.Presentation.Client.Pages.Group

@if (Group != null)
{
	<div class="modal @_modalClass" tabindex="-1" role="dialog" style="display:@_modalDisplay">
		<div class="modal-dialog" role="document">
			<div class="modal-content">
				<h1>@_errorMessage</h1>
				<br />

				<EditForm Model="Group">
					<DataAnnotationsValidator />
					<div class="modal-header">
						<h5 class="modal-title" id="exampleModalLabel">Edit @Group.Name</h5>
						<button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="Close">
							<span aria-hidden="true">&times;</span>
						</button>
					</div>
					<div class="modal-body">

						@if (Group == null)
						{

						}
						else
						{
							<div class="container">
								<div class="row">
									<div class="col-md-12">
										<div class="form-group">
											<label class="control-label col-md-6">Group name</label>
											<div class="col-md-12">
												<InputText class="form-control" @bind-Value="Group.Name" />
												<ValidationMessage For="(() => Group.Name)" />
											</div>
										</div>
									</div>

									<div class="col-md-12">
										<div class="form-group">
											<label class="control-label col-md-6">Included students</label>
											<div class="col-md-12">
												<table class="table-hover">
													<thead>
														<tr>
															<th>Full name</th>
															<th>Callsign</th>
															<th></th>
														</tr>
													</thead>
													<tbody>
														@if (includedStudents != null)
														{
															counter = 0;

															foreach (var student in includedStudents)
															{
																var i = counter++;
																<tr class="">
																	<td>@student.FullName</td>
																	<td>@student.Callsign</td>
																	<td>
																		@*<button class="btn btn-primary" @onclick="() => Edit(i)">Edit</button>
																			<button class="btn btn-primary" @onclick="async () => await RemoveAsync(i)">Remove</button>*@

																		<button class="btn btn-primary" @onclick="async () => await ExcludeAsync(i)">
																			Exclude
																		</button>
																	</td>
																</tr>
															}
														}

													</tbody>
												</table>
											</div>
										</div>
									</div>

									<div class="col-md-12">
										<div class="form-group">
											<label class="control-label col-md-6">Other students</label>
											<div class="col-md-12">
												<table class="table-hover">
													<thead>
														<tr>
															<th>Full name</th>
															<th>Callsign</th>
															<th></th>
														</tr>
													</thead>
													<tbody>
														@if (notIncludedStudents != null)
														{
															counter = 0;

															foreach (var student in notIncludedStudents)
															{
																var i = counter++;
																<tr class="">
																	<td>@student.FullName</td>
																	<td>@student.Callsign</td>
																	<td>
																		@*<button class="btn btn-primary" @onclick="() => Edit(i)">Edit</button>
																			<button class="btn btn-primary" @onclick="async () => await RemoveAsync(i)">Remove</button>*@

																		<button class="btn btn-primary" @onclick="async () => await IncludeAsync(i)">
																			Include
																		</button>
																	</td>
																</tr>
															}
														}

													</tbody>
												</table>
											</div>
										</div>
									</div>
								</div>
							</div>
						}
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Close">
							Cancel
						</button>
						<button type="submit" class="btn btn-primary" @onclick="SaveClickAsync">
							Save
						</button>
					</div>
				</EditForm>
			</div>
		</div>
	</div>
}

@code {
	[Parameter]
	public EventCallback OnSave { get; set; }

	public GroupDto Group { get; set; }

	string _modalDisplay = "block;";
	string _modalClass = "Show";
	string _errorMessage;

	int counter;
	StudentDto[] includedStudents;
	StudentDto[] notIncludedStudents;

	private async Task SaveClickAsync()
	{
		if (Group is null)
		{
			_errorMessage = "Student is null";
			return;
		}

		var result = await Http.PutAsJsonAsync($"api/Groups/Update", Group);
		if (result.StatusCode == System.Net.HttpStatusCode.OK)
		{
			Close();
			await OnSave.InvokeAsync(null);
		}
		else
			_errorMessage = result.StatusCode.ToString();
	}

	public async Task OpenAsync()
	{
		_modalDisplay = "block;";
		_modalClass = "Show";
		await LoadIncludedStudents();
		await LoadNotIncludedStudents();
		StateHasChanged();
	}

	private void Close()
	{
		_modalDisplay = "none";
		_modalClass = "";
		includedStudents = null;
		Group = null;
		StateHasChanged();
	}

	async Task LoadIncludedStudents()
	{
		if (Group != null)
			includedStudents = await Http.GetFromJsonAsync<StudentDto[]>($"api/Students/ListIncluded?GroupId={Group.Id}");
	}

	async Task LoadNotIncludedStudents()
	{
		if (Group != null)
			notIncludedStudents = await Http.GetFromJsonAsync<StudentDto[]>($"api/Students/ListNotIncluded?GroupId={Group.Id}");
	}

	async Task ExcludeAsync(int i)
	{
		var studentId = includedStudents[i].Id;
		var groupId = Group.Id;

		await Http.PostAsJsonAsync($"api/Groups/ExcludeStudent",
			new StudentGroupRequest
			{
				StudentId = studentId,
				GroupId = groupId
			});

		await LoadIncludedStudents();
		await LoadNotIncludedStudents();
	}

	async Task IncludeAsync(int i)
	{
		var studentId = notIncludedStudents[i].Id;
		var groupId = Group.Id;

		await Http.PostAsJsonAsync($"api/Groups/IncludeStudent",
			new StudentGroupRequest
			{
				StudentId = studentId,
				GroupId = groupId
			});

		await LoadIncludedStudents();
		await LoadNotIncludedStudents();
	}
}
