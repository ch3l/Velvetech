@page "/gr"

@inject HttpClient Http
@inject NavigationManager NavigationManager

@using System.Linq
@using Presentation.Shared
@using Presentation.Shared.Dtos

@namespace Presentation.Client.Pages.Group

<h1>Groups</h1>

<button class="btn btn-primary" @onclick="Add">Add student</button>

@if (groups == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Group name</th>
				@*<th>Student count</th>*@
				<th></th>
			</tr>
		</thead>
		<tbody>
			@{
				counter = 0;
			}
			@foreach (var group in groups)
			{
				var i = counter++;

				<tr class="">
					<td>@group.Name</td>
					@*<td>@(string.Join(", ", student.Groups.Select(x => x.Name)))</td>*@
					<td>
						<button class="btn btn-primary" @onclick="() => Edit(i)">Edit</button>
						<button class="btn btn-primary" @onclick="async () => await RemoveAsync(i)">Remove</button>
					</td>
				</tr>
			}
		</tbody>
	</table>
}

<Presentation.Client.Pages.Group.Add @ref="AddComponent" />
<Presentation.Client.Pages.Group.Edit @ref="EditComponent" />

@code
{
	int counter;
	GroupDto[] groups;

	private Add AddComponent { get; set; }
	private Edit EditComponent { get; set; }

	void Add()
	{
		if (AddComponent is null)
			return;
		AddComponent.Group = new GroupDto();
		AddComponent.Open();
	}

	void Edit(int index)
	{
		if (EditComponent is null)
			return;
		EditComponent.Group = groups[index];
		EditComponent.Open();
	}

	async Task RemoveAsync(int index)
	{
		var guid = groups[index].Id;
		await Http.DeleteAsync($"api/Groups/Delete/{guid}");
		await LoadList();
	}

	async Task LoadList()
	{
		groups = await Http.GetFromJsonAsync<GroupDto[]>($"api/Groups/List");
	}

	protected override async Task OnInitializedAsync()
	{
		await LoadList();
	}
}
