@page "/"
@*@using Velvetech.Presentation.Server.Models*@
@using Velvetech.Presentation.Shared
@inject HttpClient Http

<h1>Students</h1>

<p><em>@Title</em></p>

<button class="btn btn-primary" @onclick="GenerateStudent">AddStudent (@studentCounter)</button>
<button class="btn btn-primary" @onclick="GenerateStudent">AddStudent (@studentCounter)</button>

@if (students == null)
{
	<p><em>Loading...</em></p>
}
else
{

	<table class="table">
		<thead>
			<tr>
				<th>First name</th>
				<th>Callsign</th>
				<th></th>
				<th></th>
			</tr>
		</thead>
		<tbody>
			@{
				counter = 0;
			}
			@foreach (var student in students)
			{
				var i = counter;

				<tr class="">
					<td>@student.FirstName</td>
					<td>@student.Callsign</td>
					<td>
						<button class="btn btn-primary" @onclick="() => Edit(i)">Edit</button>
					</td>
					<td>
						<button class="btn btn-primary" @onclick="() => Remove(i)">Remove</button>
					</td>
				</tr>

				{
					counter++;
				}
			}
		</tbody>
	</table>
}

@if (strings == null)
{
	<p><em>Loading...</em></p>
}
else
{

	<table class="table">
		<thead>
			<tr>
				<th>String value</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var str in strings)
			{
				<tr class="">
					<td>@str</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	int counter, studentCounter;
	Presentation.Shared.Dtos.StudentDto[] students;
	private string[] strings;
	string Title = "";
	async Task Edit(int index)
	{
		//Title = "\"" + (await Http.GetFromJsonAsync<Student>($"api/Students/{students[index].Id}")).FullName + "\"";
	}

	void Remove(int index)
	{
		var guid = students[index].Callsign;
		Title = "Remove " + guid.ToString();
	}

	async Task GenerateStudent()
	{
		studentCounter = await Http.GetFromJsonAsync<int>("api/Test/StudentsCount");
		studentCounter++;
		await Http.PostAsJsonAsync("api/Test/AddStudent",
			new Presentation.Shared.Requests.AddStudentRequest(
				1,
				"First name " + studentCounter,
				"Middle name " + studentCounter,
				"Last name " + studentCounter,
				"Callsign " + studentCounter));
	}

	/*
	protected override async Task OnInitializedAsync()
	{
		students = (await Http.GetFromJsonAsync<IEnumerable<Student>>("api/Students")).ToArray();
		//students = (await Http.GetFromJsonAsync<IEnumerable<Student>>("api/Students?groupname=third&sex=male&callsign=1&fullname=2")).ToArray();
	}*/


	protected override async Task OnInitializedAsync()
	{
		strings = await Http.GetFromJsonAsync<string[]>("api/Test/Strings");
		students = await Http.GetFromJsonAsync<Presentation.Shared.Dtos.StudentDto[]>("api/Test/Students");
	}
}