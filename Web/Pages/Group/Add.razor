@inject GroupService GroupService
@using Velvetech.Web.Dtos
@using Velvetech.Web.Services
@using Velvetech.Web.Services.Results

@namespace Velvetech.Web.Pages.Group

@if (Group != null)
{
	<div class="modal @_modalClass" tabindex="-1" role="dialog" style="display:@_modalDisplay">
		<div class="modal-dialog" role="document">
			<div class="modal-content">
				@if (_errorMessage != null)
				{
					<h1>@_errorMessage</h1>
					<br />
				}

				<EditForm Model="Group" OnValidSubmit="@SaveClick">
					<DataAnnotationsValidator />
					<div class="modal-header">
						<h5 class="modal-title" id="exampleModalLabel">Adding group</h5>
						<button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="Close">
							<span aria-hidden="true">&times;</span>
						</button>
					</div>
					<div class="modal-body">
						@if (Group != null)
						{
							<div class="container">
								<div class="row">
									<div class="col-md-12">
										<div class="form-group">
											<label class="control-label col-md-6">Group name</label>
											<div class="col-md-12">
												<InputText class="form-control" @bind-Value="Group.Name" />
												<ValidationMessage For="(() => Group.Name)" />
												@if (_groupNameErrorsString != null)
												{
													<b>@_groupNameErrorsString</b>
												}
											</div>
										</div>
									</div>
								</div>
							</div>
						}
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Close">Cancel</button>
						<button type="submit" class="btn btn-primary">
							Save
						</button>
					</div>
				</EditForm>
			</div>
		</div>
	</div>
}

@code {
	[Parameter]
	public EventCallback OnSave { get; set; }

	public GroupDto Group { get; set; }
	string _modalDisplay = "block;";
	string _modalClass = "Show";
	string _errorMessage;
	string _groupNameErrorsString;

	private async Task SaveClick()
	{
		if (Group is null)
		{
			_errorMessage = "Group is null";
			return;
		}

		var result = await GroupService.AddAsync(Group);
		if (result is SuccessfulEntityAction<GroupDto> group)
		{
			await OnSave.InvokeAsync(null);
			Close();
		}
		else
		{
			if (result is GroupErrors errors)
			{
				_groupNameErrorsString = null;
				if (errors.Name != null)
					_groupNameErrorsString = string.Join(", ", errors.Name);
			}
		}
	}

	public void Open()
	{
		_errorMessage = "";
		_modalDisplay = "block;";
		_modalClass = "Show";
		StateHasChanged();
	}

	private void Close()
	{
		_modalDisplay = "none";
		_modalClass = "";
		StateHasChanged();
	}
}
