@page "/pages/groups"

@inject GroupClient GroupService
@using System.Timers
@using Velvetech.Shared.Dtos
@using Velvetech.Web.HttpClients

@namespace Velvetech.Web.Pages.Group

<h1>Groups</h1>

<button class="btn btn-primary" @onclick="Add">Add group</button>
<br />
@*<button class="btn btn-primary" @onclick="Add">Add student to all groups</button>*@

@if (_groups == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Group name</th>
				<th>Student count</th>
				<th></th>
			</tr>

			<tr>
				<th><input type="text"
				           class="form-control"
				           @bind-value="_group"
				           @bind-value:event="oninput"
				           @onkeyup="@StartSearchTimer" /></th>
				<th>
				</th>
				<th></th>
			</tr>
		</thead>
		<tbody>
			@{
				_counter = 0;
			}
			@foreach (var group in _groups)
			{
				var i = _counter++;

				<tr class="">
					<td>@group.Name</td>
					<td>@group.StudentsCount</td>
					<td>
						<button class="btn btn-primary" @onclick="async () => await EditAsync(i)">Edit</button>
						<button class="btn btn-primary" @onclick="async () => await RemoveAsync(i)">Remove</button>
					</td>
				</tr>
			}
		</tbody>
	</table>
}

<Velvetech.Web.Pages.Group.Add @ref="AddComponent" OnSave="LoadList" />
<Velvetech.Web.Pages.Group.Edit @ref="EditComponent" OnSave="LoadList" />

@code
{
	int _counter;
	GroupDto[] _groups;

	private Add AddComponent { get; set; }
	private Edit EditComponent { get; set; }

	string _group = "";
	string _previousGroup;

	Timer _searchDelayTimer = new Timer(300) { Enabled = false, AutoReset = false };

	void StartSearchTimer()
	{
		_searchDelayTimer.Enabled = false;
		_searchDelayTimer.Enabled = true;
	}

	void Add()
	{
		if (AddComponent is null)
			return;
		AddComponent.Group = new GroupDto();
		AddComponent.Open();
	}

	async Task EditAsync(int index)
	{
		if (EditComponent is null)
			return;
		EditComponent.Group = _groups[index];
		await EditComponent.OpenAsync();
	}

	async Task RemoveAsync(int index)
	{
		var guid = _groups[index].Id;
		await GroupService.DeleteAsync(guid);
		await LoadList();
	}

	async Task LoadList()
	{
		_groups = await GroupService.ListAsync(_group.Trim());
	}

	protected override async Task OnInitializedAsync()
	{
		await LoadList();

		_searchDelayTimer.Elapsed += async (sender, args) =>
		{
			if (_previousGroup == _group)
				return;

			await LoadList();

			_previousGroup = _group;
			await InvokeAsync(StateHasChanged);
		};
	}
}
